{"abi":[],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"StdChains provides information about EVM compatible chains that can be used in scripts/tests. For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the alias used in this contract, which can be found as the first argument to the `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function. There are two main ways to use this contract:   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or      `setChain(string memory chainAlias, Chain memory chain)`   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`. The first time either of those are used, chains are initialized with the default set of RPC URLs. This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in `defaultRpcUrls`. The `setChain` function is straightforward, and it simply saves off the given chain data. The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say we want to retrieve the RPC URL for `mainnet`:   - If you have specified data with `setChain`, it will return that.   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it     is valid (e.g. a URL is specified, or an environment variable is given and exists).   - If neither of the above conditions is met, the default data is returned. Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/forge-std/src/StdChains.sol\":\"StdChains\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@hack/=src/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-huff/=lib/foundry-huff/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solidity-stringutils/=lib/foundry-huff/lib/solidity-stringutils/\",\":solmate/=lib/solmate/src/\",\":stringutils/=lib/foundry-huff/lib/solidity-stringutils/\"]},\"sources\":{\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0xe079be3c1dbbbcd057bfecfafef4c0388a9349e9000f9d8303419668e1385096\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46e410506855b381679484049fa69e0a1a3224e530714bca5a770865c414bc13\",\"dweb:/ipfs/QmTPLzVEfwPcMsWyFQ4GDaHiRp5S1uA5CNHigHkdjP7vye\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x4c3a6f32779bc206ee57f3205e25960988205e0042c3dec782441ebaabce253e\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://18c9b0aebcb5325e933b850a0c3aac5ee1a817a4832ac14e1daa6703109e857e\",\"dweb:/ipfs/QmTnBARUKuCfBqvKySr6u4Je46EP92RF25vfS8Lkfw48ef\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@hack/=src/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink/=lib/chainlink/contracts/","ds-test/=lib/solmate/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","foundry-huff/=lib/foundry-huff/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solidity-stringutils/=lib/foundry-huff/lib/solidity-stringutils/","solmate/=lib/solmate/src/","stringutils/=lib/foundry-huff/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/forge-std/src/StdChains.sol":"StdChains"},"evmVersion":"shanghai","libraries":{}},"sources":{"lib/forge-std/src/StdChains.sol":{"keccak256":"0xe079be3c1dbbbcd057bfecfafef4c0388a9349e9000f9d8303419668e1385096","urls":["bzz-raw://46e410506855b381679484049fa69e0a1a3224e530714bca5a770865c414bc13","dweb:/ipfs/QmTPLzVEfwPcMsWyFQ4GDaHiRp5S1uA5CNHigHkdjP7vye"],"license":"MIT"},"lib/forge-std/src/Vm.sol":{"keccak256":"0x4c3a6f32779bc206ee57f3205e25960988205e0042c3dec782441ebaabce253e","urls":["bzz-raw://18c9b0aebcb5325e933b850a0c3aac5ee1a817a4832ac14e1daa6703109e857e","dweb:/ipfs/QmTnBARUKuCfBqvKySr6u4Je46EP92RF25vfS8Lkfw48ef"],"license":"MIT OR Apache-2.0"}},"version":1},"id":18}